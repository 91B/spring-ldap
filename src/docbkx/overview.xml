<?xml version="1.0" encoding="UTF-8"?>
<chapter id="introduction">
  <title>Introduction</title>

  <sect1 id="introduction-overview">
    <title>Overview</title>

    <para>Spring LDAP (<ulink
    url="http://www.springframework.org/ldap">http://www.springframework.org/ldap</ulink>)
    is a library for simpler LDAP programming in Java, built on the same
    principles as the <ulink
    url="http://static.springframework.org/spring/docs/current/api/org/springframework/jdbc/core/JdbcTemplate.html">JdbcTemplate</ulink>
    in Spring JDBC. It completely eliminates the need to worry about creating
    and closing <literal>LdapContext</literal> and looping through
    <literal>NamingEnumeration</literal>. It also provides a more
    comprehensive unchecked Exception hierarchy, built on Spring's
    <literal>DataAccessException</literal>. As a bonus, it also contains
    classes for dynamically building LDAP queries and DNs (Distinguished
    Names), LDAP attribute management, and client-side LDAP transaction management.</para>

    <para>Consider, for example, a method that should search some storage for
    all persons and return their names in a list. Using JDBC, we would create
    a <emphasis>connection</emphasis> and execute a <emphasis>query</emphasis>
    using a <emphasis>statement</emphasis>. We would then loop over the
    <emphasis>result set</emphasis> and retrieve the
    <emphasis>column</emphasis> we want, adding it to a list. In contrast,
    using Java LDAP, we would create a <emphasis>context</emphasis> and
    perform a <emphasis>search</emphasis> using a <emphasis>search
    filter</emphasis>. We would then loop over the resulting <emphasis>naming
    enumeration</emphasis> and retrieve the <emphasis>attribute</emphasis> we
    want, adding it to a list.</para>

    <para>The traditional way of implementing this person name search method
    in Java LDAP looks like this, where the code marked as bold actually
    performs tasks related to the business purpose of the method:</para>

    <informalexample>
      <programlisting>package com.example.dao;

public class TraditionalPersonDaoImpl implements PersonDao {
   public List getAllPersonNames() {
      Hashtable env = new Hashtable();
      env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
      env.put(Context.PROVIDER_URL, "ldap://localhost:389/dc=example,dc=com");

      DirContext ctx;
      try {
         ctx = new InitialDirContext(env);
      } catch (NamingException e) {
         throw new RuntimeException(e);
      }

      LinkedList list = new LinkedList();
      NamingEnumeration results = null;
      try {
         SearchControls controls = new SearchControls();
         controls.setSearchScope(SearchControls.SUBTREE_SCOPE);
         results = ctx.<emphasis role="bold">search("", "(objectclass=person)"</emphasis>, controls);

         while (results.hasMore()) {
            SearchResult searchResult = (SearchResult) results.next();
            Attributes attributes = searchResult.getAttributes();
            <emphasis role="bold">Attribute attr = attributes.get("cn");
            String cn = (String) attr.get();
            list.add(cn);</emphasis>
         }
      } catch (NameNotFoundException e) {
         // The base context was not found.
         // Just clean up and exit.
      } catch (NamingException e) {
         throw new RuntimeException(e);
      } finally {
         if (results != null) {
            try {
               results.close();
            } catch (Exception e) {
               // Never mind this.
            }
         }
         if (ctx != null) {
            try {
               ctx.close();
            } catch (Exception e) {
               // Never mind this.
            }
         }
      }
      <emphasis role="bold">return list;</emphasis>
   }
}</programlisting>
    </informalexample>

    <para>By using the Spring LDAP classes <literal>AttributesMapper</literal>
    and <literal>LdapTemplate</literal>, we get the exact same functionality
    with the following code:</para>

    <informalexample>
      <programlisting>package com.example.dao;
import static org.springframework.ldap.query.LdapQueryBuilder.query;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;

   public void setLdapTemplate(LdapTemplate ldapTemplate) {
      this.ldapTemplate = ldapTemplate;
   }

   public List getAllPersonNames() {
      return ldapTemplate.<emphasis role="bold">search(
         query().where("objectclass").is("person")</emphasis>,
         new AttributesMapper() {
            public Object mapFromAttributes(Attributes attrs)
               throws NamingException {
               <emphasis role="bold">return attrs.get("cn").get();</emphasis>
            }
         });
   }
}</programlisting>
    </informalexample>

    <para>The amount of boiler-plate code is significantly less than in the
    traditional example. The <literal>LdapTemplate</literal> version of the
    search method performs the search, maps the attributes to a string using
    the given <literal>AttributesMapper</literal>, collects the strings in an
    internal list, and finally returns the list.</para>

    <para>Note that the <literal>PersonDaoImpl</literal> code simply assumes
    that it has an <literal>LdapTemplate</literal> instance, rather than
    looking one up somewhere. It provides a set method for this purpose. There
    is nothing Spring-specific about this "Inversion of Control". Anyone that
    can create an instance of <literal>PersonDaoImpl</literal> can also set
    the <literal>LdapTemplate</literal> on it. However, Spring provides a very
    flexible and easy way of <ulink
    url="http://static.springframework.org/spring/docs/current/reference/beans.html">achieving
    this</ulink>. The Spring container can be told to wire up an instance of
    <literal>LdapTemplate</literal> with its required dependencies and inject
    it into the <literal>PersonDao</literal> instance. This wiring can be
    defined in various ways, but the most common is through XML:</para>

    <informalexample>
      <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:ldap="http://www.springframework.org/schema/ldap"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/ldap http://www.springframework.org/schema/ldap/spring-ldap.xsd">

   <ldap:context-source
          url="ldap://localhost:389"
          base="dc=example,dc=com"
          username="cn=Manager"
          password="secret" />

   <ldap:ldap-template id="ldapTemplate" />

   <bean id="personDao" class="com.example.dao.PersonDaoImpl">
      <property name="ldapTemplate" ref="ldapTemplate" />
   </bean>
</beans>
]]></programlisting>
    </informalexample>
      <note>
          In order to use the custom XML namespace for configuring the Spring LDAP components
          you need to include references to this namespace in your XML declaration as in the example above.
      </note>
  </sect1>

  <sect1 id="introduction-packaging">
    <title>Packaging overview</title>

    <para>At a minimum, to use Spring LDAP you need:</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para><emphasis>spring-ldap-core</emphasis> (the Spring LDAP library)</para>
      </listitem>

      <listitem>
        <para><emphasis>spring-core</emphasis> (miscellaneous utility classes used internally by
        the framework)</para>
      </listitem>

      <listitem>
        <para><emphasis>spring-beans</emphasis> (contains interfaces and classes for manipulating
        Java beans)</para>
      </listitem>

      <listitem>
        <para><emphasis>slf4j</emphasis> (a simple logging facade, used
        internally)</para>
      </listitem>

      <listitem>
        <para><emphasis>commons-lang</emphasis> (misc utilities, used internally)</para>
      </listitem>

    </itemizedlist>

    <para>In addition to the required dependencies the following optional dependencies
    are required for certain functionality:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>spring-context</emphasis> (If your application is wired up using the Spring Application Context - 
        adds the ability for application objects to obtain resources using a consistent API. Definitely needed if you are 
        planning on using the BaseLdapPathBeanPostProcessor.)</para>
      </listitem>
      <listitem>
        <para><emphasis>spring-tx</emphasis> (If you are planning to use the client side compensating transaction support)</para>
      </listitem>
      <listitem>
        <para><emphasis>spring-jdbc</emphasis> (If you are planning to use the client side compensating transaction support)</para>
      </listitem>
      <listitem>
        <para><emphasis>commons-pool</emphasis> (If you are planning to use the pooling functionality)</para>
      </listitem>
      <listitem>
        <para><emphasis>spring-batch</emphasis> (If you are planning to use the LDIF parsing functionality together with Spring Batch)</para>
      </listitem>
    </itemizedlist>

  </sect1>

  <sect1 id="new-in-20">
      <title>What's new in Spring LDAP 2.0?</title>
      <para>
          While quite significant modernizations have been made to the Spring LDAP APi in version 2.0, great care has been
          taken to ensure backward compatibility as far as possible.
          Code that works with Spring LDAP 1.3.x should with very few exceptions still compile and run using the 2.0 libraries
          without any modifications whatsoever.
      </para>
      <para>
          The exception is a small number of classes that have been moved to new packages in order to make
          a couple of important refactorings possible. The moved classes are usually not part of the intended
          public API, and the migration procedure should be very smooth - wherever a Spring LDAP class cannot be found
          after upgrade, just organize the imports in your IDE.
      </para>
      <para>
          You will probably encounter some deprecation warnings though, and there are also a lot of other API improvements.
          The recommendation for getting as much as possible out of the 2.0 version is to move away from the deprecated
          classes and methods and migrate to the new, improved API utilities.
      </para>
      <para>
          Below is a list of the most important changes in Spring LDAP 2.0.
      </para>
      <itemizedlist>
          <listitem>Java 1.6 is now required when using Spring LDAP. Spring versions starting at 2.0 and up are still supported.</listitem>
          <listitem>
              The central API has been updated with Java 5 features such as generics and varargs. As a consequence,
              the entire <literal>spring-ldap-tiger</literal> module has been deprecated and users are encouraged to migrate
              to use the core Spring LDAP classes. The parameterization of the core interfaces will most likely cause
              lots of compilation warnings, and you are obviously encouraged to take appropriate action to get rid
              of these warning.
          </listitem>
          <listitem>
              The ODM (Object-Directory Mapping) functionality has been moved to core and there are new methods
              in <literal>LdapOperations</literal>/<literal>LdapTemplate</literal> that uses this automatic
              translation to/from ODM-annotated classes. See <xref linkend="odm" /> for more information.
          </listitem>
          <listitem>
              A custom XML namespace is now provided to simplify configuration of Spring LDAP.
              See <xref linkend="configuration" /> for more information.
          </listitem>
          <listitem>
              <literal>DistinguishedName</literal> and associated classes have been deprecated in favor of standard
              Java <literal>LdapName</literal>. See <xref linkend="ldap-names" /> for information on how the library
              helps working with <literal>LdapNames</literal>.
          </listitem>
          <listitem>
              Fluent LDAP query support has been added. This makes for a more pleasant programming experience when
              working with LDAP searches in Spring LDAP. See <xref linkend="basic-queries" /> and
              <xref linkend="query-builder-advanced" /> for more information about the LDAP query builder support.
          </listitem>
          <listitem>
              The old <literal>authenticate</literal> methods in <literal>LdapTemplate</literal> have been deprecated
              in favor of a couple of new <literal>authenticate</literal> methods that work with
              <literal>LdapQuery</literal> objects and <emphasis>throw exceptions</emphasis> on authentication failure,
              making it easier for the user to find out what caused an authentication attempt to fail.
          </listitem>
      </itemizedlist>
  </sect1>
  <sect1 id="introduction-support">
    <title>Support</title>

    <para>Spring LDAP 2.0 is supported on Spring 2.0 and later.</para>

    <para>The community support forum is located at <ulink
    url="http://forum.spring.io/forum/spring-projects/data/ldap">http://forum.spring.io/forum/spring-projects/data/ldap</ulink>,
    and the project web page is <ulink
    url="http://projects.spring.io/spring-ldap/">http://projects.spring.io/spring-ldap/</ulink>.</para>
  </sect1>
</chapter>
