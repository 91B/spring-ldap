<?xml version="1.0" encoding="UTF-8"?>
<chapter id="query-builder-advanced">
  <title>Advanced LDAP Queries</title>

  <sect1>
    <title>LDAP Query Builder Parameters</title>

    <para>The <literal>LdapQueryBuilder</literal> and its associated classes is intended to support all parameters
    that can be supplied to an LDAP search. The following parameters are supported:
        <itemizedlist>
            <listitem><literal>base</literal> - specifies the root DN in the LDAP tree where the search should start.</listitem>
            <listitem><literal>searchScope</literal> - specifies how deep into the LDAP tree the search should traverse.</listitem>
            <listitem><literal>attributes</literal> - specifies the attributes to return from the search. Default is all.</listitem>
            <listitem><literal>countLimit</literal> - specifies the maximum number of entries to return from the search.</listitem>
            <listitem><literal>timeLimit</literal> - specifies the maximum time that the search may take.</listitem>
            <listitem>Search filter - the conditions that the entries we are looking for must meet.</listitem>
        </itemizedlist>
    </para>
    <para>
        An <literal>LdapQueryBuilder</literal> is created with a call to the <literal>query</literal> method of
        <literal>LdapQueryBuilder</literal>. It's intended as a fluent builder API, where the base parameters are defined first,
        followed by the filter specification calls. Once filter conditions have been started to be defined with a call to the
        <literal>where</literal> method of <literal>LdapQueryBuilder</literal>, later attempts to call e.g. <literal>base</literal>
        will be rejected. The base search parameters are optional, but at least one filter specification call is required.
    </para>
      <example>
          <title>Search for all entries with objectclass person</title>
          <programlisting>import static org.springframework.ldap.query.LdapQueryBuilder.query;
...

List&lt;Person&gt; persons = ldapTemplate.search(
      query().where("objectclass").is("person"),
      new PersonAttributesMapper());
          </programlisting>
      </example>
      <example>
          <title>Search for all entries with objectclass person and cn=John Doe</title>
          <programlisting>import static org.springframework.ldap.query.LdapQueryBuilder.query;
...

List&lt;Person&gt; persons = ldapTemplate.search(
      query().where("objectclass").is("person")
             .and("cn").is("John Doe"),
      new PersonAttributesMapper());
          </programlisting>
      </example>
      <example>
          <title>Search for all entries with objectclass person starting at <literal>dc=261consulting,dc=com</literal></title>
          <programlisting>import static org.springframework.ldap.query.LdapQueryBuilder.query;
...

List&lt;Person&gt; persons = ldapTemplate.search(
      query().base("dc=261consulting,dc=com")
             .where("objectclass").is("person"),
      new PersonAttributesMapper());
          </programlisting>
      </example>
      <example>
          <title>Search for all entries with objectclass person starting at <literal>dc=261consulting,dc=com</literal>,
          only returning the cn attribute</title>
          <programlisting>import static org.springframework.ldap.query.LdapQueryBuilder.query;
...

List&lt;Person&gt; persons = ldapTemplate.search(
      query().base("dc=261consulting,dc=com")
             .attributes("cn")
             .where("objectclass").is("person"),
      new PersonAttributesMapper());
          </programlisting>
      </example>
      <example>
          <title>Search for all entries with objectclass person where sn=Doe or Doo (nested query)</title>
          <programlisting>import static org.springframework.ldap.query.LdapQueryBuilder.query;
...
List&lt;Person&gt; persons = ldapTemplate.search(
      query().where("objectclass").is("person"),
             .and(query().where("cn").is("Doe").or("cn").is("Doo));
      new PersonAttributesMapper());
          </programlisting>
      </example>
  </sect1>
  <sect1>
      <title>Filter Criteria</title>
      <para>
          The examples above demonstrates simple equals conditions in LDAP filters. The LDAP query builder has support
          for the following criteria types:
          <itemizedlist>
              <listitem><literal>is</literal> - specifies an equals condition (=).</listitem>
              <listitem><literal>gte</literal> - specifies a greater than or equals condition (&gt;=).</listitem>
              <listitem><literal>lte</literal> - specifies a less than or equals condition (&lt;=).</listitem>
              <listitem>
                  <literal>like</literal> - specifies a &quot;like&quot; condition where wildcards can be included in the query,
                  e.g. <literal>where("cn").like("J*hn Doe")</literal> will result int the filter <literal>(cn=J*hn Doe)</literal>.
              </listitem>
              <listitem>
                  <literal>whitespaceWildcardsLike</literal> - specifies a condition where all whitespace is replaced with wildcards,
                  e.g. <literal>where("cn").whitespaceWildcardsLike("John Doe")</literal> will result in the filter
                  <literal>(cn=*John*Doe*)</literal>.
              </listitem>
              <listitem>
                  <literal>isPresent</literal> - specifies condition that checks for the presence of an attribute,
                  e.g. <literal>where("cn").isPresent()</literal> will result in the filter <literal>(cn=*)</literal>.
              </listitem>
              <listitem>
                  <literal>not</literal> - specifies that the current condition should be negated, e.g.
                  <literal>where("sn").not().is("Doe)</literal> will result in the filter <literal>(!(sn=Doe))</literal>
              </listitem>
          </itemizedlist>
      </para>
  </sect1>
</chapter>