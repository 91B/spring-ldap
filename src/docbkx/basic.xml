<?xml version="1.0" encoding="UTF-8"?>
<chapter id="basic">
  <title>Basic Operations</title>

  <sect1 id="basic-searches">
    <title>Search and Lookup Using AttributesMapper</title>

    <para>In this example we will use an <literal>AttributesMapper</literal>
    to easily build a List of all common names of all person objects.</para>

    <example>
      <title>AttributesMapper that returns a single attribute</title>

      <programlisting>package com.example.dao;
import static org.springframework.ldap.query.LdapQueryBuilder.query;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;

   public void setLdapTemplate(LdapTemplate ldapTemplate) {
      this.ldapTemplate = ldapTemplate;
   }

   public List&lt;String&gt; getAllPersonNames() {
      return ldapTemplate.search(query()
         .where("objectclass").is("person"),
<emphasis role="bold">         new AttributesMapper&lt;String&gt;() {
            public String mapFromAttributes(Attributes attrs)
               throws NamingException {
               return (String) attrs.get("cn").get();
            }
         }</emphasis>);
   }
}</programlisting>
    </example>

    <para>The inline implementation of <literal>AttributesMapper</literal>
    just gets the desired attribute value from the
    <literal>Attributes</literal> and returns it. Internally,
    <literal>LdapTemplate</literal> iterates over all entries found, calling
    the given <literal>AttributesMapper</literal> for each entry, and collects
    the results in a list. The list is then returned by the
    <literal>search</literal> method.</para>

    <para>Note that the <literal>AttributesMapper</literal> implementation
    could easily be modified to return a full <literal>Person</literal>
    object:</para>

    <example>
      <title>AttributesMapper that returns a Person object</title>

      <programlisting>package com.example.dao;
import static org.springframework.ldap.query.LdapQueryBuilder.query;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
<emphasis role="bold">   private class PersonAttributesMapper implements AttributesMapper&lt;Person&gt; {
      public Person mapFromAttributes(Attributes attrs) throws NamingException {
         Person person = new Person();
         person.setFullName((String)attrs.get("cn").get());
         person.setLastName((String)attrs.get("sn").get());
         person.setDescription((String)attrs.get("description").get());
         return person;
      }
   }
</emphasis>
   public List&lt;Person&gt; getAllPersons() {
      return ldapTemplate.search(query()
          .where("objectclass").is("person"), <emphasis
          role="bold">new PersonAttributesMapper()</emphasis>);
   }
}</programlisting>
    </example>

    <para>If you have the distinguished name (<literal>dn</literal>) that
    identifies an entry, you can retrieve the entry directly, without
    searching for it. This is called a <emphasis>lookup</emphasis> in Java
    LDAP. The following example shows how a lookup results in a Person
    object:</para>

    <example>
      <title>A lookup resulting in a Person object</title>

      <programlisting>package com.example.dao;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public Person findPerson(String dn) {
      return ldapTemplate.lookup(dn, new PersonAttributesMapper());
   }
}</programlisting>
    </example>

    <para>This will look up the specified <literal>dn</literal> and pass the
    found attributes to the supplied <literal>AttributesMapper</literal>, in
    this case resulting in a <literal>Person</literal> object.</para>
  </sect1>

  <sect1 id="basic-queries">
    <title>Building LDAP Queries</title>
    <para>LDAP searches involve a number of parameters, e.g. Base LDAP path,
    search scope, attributes to return, and search filters.</para>
    <para>Spring LDAP provides an <literal>LdapQueryBuilder</literal> with a fluent
    API for building LDAP Queries.</para>
    <para>Let's say that we want to perform a search starting at the
    base DN <literal>dc=261consulting,dc=com</literal>, limiting the returned attributes to &quot;cn&quot;
    and &quot;sn&quot;, with the following filter:
    <literal>(&amp;(objectclass=person)(sn=?))</literal>, where we want the
    <literal>?</literal> to be replaced with the value of the parameter
    <literal>lastName</literal>. This is how we do it using the LdapQueryBuilder:</para>

    <example>
      <title>Building a search filter dynamically</title>

      <programlisting>package com.example.dao;
import static org.springframework.ldap.query.LdapQueryBuilder.query;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public List getPersonNamesByLastName(String lastName) {
<emphasis role="bold">
      LdapQuery query = query()
         .base("dc=261consulting,dc=com")
         .attributes("cn", "sn")
         .where("objectclass").is("person")
         .and("sn").is(lastName);
</emphasis>
      return ldapTemplate.search(query,
         new AttributesMapper() {
            public Object mapFromAttributes(Attributes attrs)
               throws NamingException {
               return attrs.get("cn").get();
            }
         });
   }
}</programlisting>
    </example>
    <para>
    	<note>
    		In addition to simplifying building of complex search parameters,
    		the <literal>LdapQueryBuilder</literal> and its associated classes
            also provide proper escaping of any unsafe characters in search filters.
            This prevents &quot;ldap injection&quot;, where a user might use such
            characters to inject unwanted operations into your LDAP operations.
    	</note>
        <note>
            There are many overloaded methods in <literal>LdapTemplate</literal> for
            performing LDAP searches. This is in order to accommodate for as many different use cases
            and programming style preferences as possible. For the vast majority of use cases the ones that
            take an <literal>LdapQuery</literal> as input will be the recommended methods to use.
        </note>
        <note>
            The <literal>AttributesMapper</literal> is just one of the available callback interfaces to use
            when handling search and lookup data. See <xref linkend="dirobjectfactory" /> for alternatives.
        </note>
    </para>
    <para>
        For more information on the <literal>LdapQueryBuilder</literal> see <xref linkend="query-builder-advanced" />.
    </para>
  </sect1>

  <sect1 id="ldap-names">
    <title>Dynamically Building Distinguished Names</title>
      <para>
          The standard Java implementation of Distinguished Name, <ulink
              url="http://docs.oracle.com/javase/6/docs/api/javax/naming/ldap/LdapName.html">LdapName</ulink>,
          performs very well when it comes to parsing of Distinguished Names. However, in practical use
          this implementation has a number of shortcomings:
          <itemizedlist>
              <listitem>
                  <para>
                      The <literal>LdapName</literal> implementation is mutable, which is badly suited for an object
                      representing identity.
                  </para>
              </listitem>
              <listitem>
                  <para>
                      Despite its mutable nature, the API for dynamically building or modifying Distinguished Names using
                      <literal>LdapName</literal> is cumbersome. Extracting values of indexed or (particularly)
                      named components is also a little bit awkward.
                  </para>
              </listitem>
              <listitem>
                  <para>
                      Many of the operations on <literal>LdapName</literal> throw checked Exceptions, requiring unnecessary
                      try-catch statements for situations where the error is typically fatal and cannot be repaired in
                      a meaningful manner.
                  </para>
              </listitem>
          </itemizedlist>

          To simplify working with Distinguished Names, Spring LDAP provides an <literal>LdapNameBuilder</literal>, as
          well as a number of utility methods in <literal>LdapUtils</literal> that helps working with
          <literal>LdapName</literal>.
      </para>
      <para>
          Below are a couple of examples of how these utilities can simplify handling of distinguished names.
          <example>
          <title>Dynamically building an LdapName using LdapNameBuilder</title>
          <programlisting>package com.example.dao;
import org.springframework.ldap.support.LdapNameBuilder;
import javax.naming.Name;

public class PersonDaoImpl implements PersonDao {
public static final String BASE_DN = "dc=example,dc=com";
...
protected Name buildDn(Person p) {
<emphasis role="bold">  return LdapNameBuilder.newLdapName(BASE_DN)
    .add("c", p.getCountry())
    .add("ou", p.getCompany())
    .add("cn", p.getFullname())
    .build();
</emphasis>
}
          </programlisting>
          </example>
          Assuming that a Person has the following attributes:
      </para>
      <informaltable>
          <tgroup cols="2">
              <tbody>
                  <row>
                      <entry><literal>country</literal></entry>
                      <entry>Sweden</entry>
                  </row>
                  <row>
                      <entry><literal>company</literal></entry>
                      <entry>Some Company</entry>
                  </row>
                  <row>
                      <entry><literal>fullname</literal></entry>
                      <entry>Some Person</entry>
                  </row>
              </tbody>
          </tgroup>
      </informaltable>

      <para>The code above would then result in the following distinguished
          name:</para>

      <para><programlisting>cn=Some Person, ou=Some Company, c=Sweden, dc=example, dc=com</programlisting></para>
      <para>
          <example>
              <title>Extracting values from a distinguished name using LdapUtils</title>
              <programlisting>package com.example.dao;
import org.springframework.ldap.support.LdapNameBuilder;
import javax.naming.Name;
public class PersonDaoImpl implements PersonDao {
...
protected Person buildPerson(Name dn, Attributes attrs) {
  Person person = new Person();
  person.setCountry(<emphasis role="bold">LdapUtils.getStringValue(dn, "c")</emphasis>);
  person.setCompany(<emphasis role="bold">LdapUtils.getStringValue(dn, "ou")</emphasis>);
  person.setFullname(<emphasis role="bold">LdapUtils.getStringValue(dn, "cn")</emphasis>);
  // Populate rest of person object using attributes.

  return person;
}
              </programlisting>
          </example>
          Since Java version &lt;=1.4 didn't provide any public Distinguished Name implementation at all, Spring LDAP
          1.3.2 and lower provided its own implementation, <literal>DistinguishedName</literal>. This implementation
          suffered from a couple of shortcomings of its own, and has been deprecated in version 2.0.
          Users are now recommended to use <literal>LdapName</literal> along with the utilities described above instead.
      </para>
  </sect1>

  <sect1 id="basic-binding-unbinding">
    <title>Binding and Unbinding</title>

    <sect2 id="basic-binding-data">
      <title>Binding Data</title>

      <para>Inserting data in Java LDAP is called binding. In order to do
      that, a distinguished name that uniquely identifies the new entry is
      required. The following example shows how data is bound using
      LdapTemplate:</para>

      <example>
        <title>Binding data using Attributes</title>

        <programlisting>package com.example.dao;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public void create(Person p) {
      Name dn = buildDn(p);
<emphasis role="bold">      ldapTemplate.bind(dn, null, buildAttributes(p));
</emphasis>   }

   private Attributes buildAttributes(Person p) {
      Attributes attrs = new BasicAttributes();
      BasicAttribute ocattr = new BasicAttribute("objectclass");
      ocattr.add("top");
      ocattr.add("person");
      attrs.put(ocattr);
      attrs.put("cn", "Some Person");
      attrs.put("sn", "Person");
      return attrs;
   }
}</programlisting>
      </example>

      <para>The Attributes building is--while dull and verbose--sufficient for
      many purposes. It is, however, possible to simplify the binding
      operation further, which will be described in <xref
      linkend="dirobjectfactory" />.</para>
    </sect2>

    <sect2 id="basic-unbinding-data">
      <title>Unbinding Data</title>

      <para>Removing data in Java LDAP is called unbinding. A distinguished
      name (dn) is required to identify the entry, just as in the binding
      operation. The following example shows how data is unbound using
      LdapTemplate:</para>

      <example>
        <title>Unbinding data</title>

        <programlisting>package com.example.dao;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public void delete(Person p) {
      Name dn = buildDn(p);
<emphasis role="bold">      ldapTemplate.unbind(dn);
</emphasis>   }
}</programlisting>
      </example>
    </sect2>
  </sect1>

  <sect1 id="basic-modifying">
    <title>Modifying</title>

    <para>In Java LDAP, data can be modified in two ways: either using
    <emphasis>rebind</emphasis> or
    <emphasis>modifyAttributes</emphasis>.</para>

    <sect2>
      <title>Modifying using <literal>rebind</literal></title>

      <para>A <literal>rebind</literal> is a very crude way to modify data.
      It's basically an <literal>unbind</literal> followed by a
      <literal>bind</literal>. It looks like this:</para>

      <example>
        <title>Modifying using rebind</title>

        <programlisting>package com.example.dao;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public void update(Person p) {
      Name dn = buildDn(p);
<emphasis role="bold">      ldapTemplate.rebind(dn, null, buildAttributes(p));
</emphasis>   }
}</programlisting>
      </example>
    </sect2>

    <sect2 id="modify-modifyAttributes">
      <title>Modifying using <literal>modifyAttributes</literal></title>

      <para>If only the modified attributes should be replaced, there is a
      method called <literal>modifyAttributes</literal> that takes an array of
      modifications:</para>

      <example>
        <title>Modifying using modifyAttributes</title>

        <programlisting>package com.example.dao;

public class PersonDaoImpl implements PersonDao {
   private LdapTemplate ldapTemplate;
   ...
   public void updateDescription(Person p) {
      Name dn = buildDn(p);
      Attribute attr = new BasicAttribute("description", p.getDescription())
      ModificationItem item = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, attr);
<emphasis role="bold">      ldapTemplate.modifyAttributes(dn, new ModificationItem[] {item});
</emphasis>   }
}</programlisting>
      </example>

      <para>Building <literal>Attributes</literal> and
      <literal>ModificationItem</literal> arrays is a lot of work, but as you
      will see in <xref linkend="dirobjectfactory" />, the update operations
      can be simplified.</para>
    </sect2>
  </sect1>

  <sect1 id="samples">
    <title>Sample applications</title>

    <para>It is recommended that you review the Spring LDAP sample
    applications included in the release distribution for best-practice
    illustrations of the features of this library. A description of each
    sample is provided below:</para>

    <para><orderedlist>
        <listitem>
          <para>spring-ldap-person - the sample demonstrating most
          features.</para>
        </listitem>

        <listitem>
          <para>spring-ldap-article - the sample application that was written
          to accompany a <ulink
          url="http://today.java.net/pub/a/today/2006/04/18/ldaptemplate-java-ldap-made-simple.html">java.net
          article</ulink> about Spring LDAP.</para>
        </listitem>
      </orderedlist></para>
  </sect1>
</chapter>
