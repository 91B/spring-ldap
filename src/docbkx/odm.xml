<?xml version="1.0" encoding="UTF-8"?>
<chapter id="odm">
  <title>Object-Directory Mapping (ODM)</title>

  <sect1 id="odm-intro">
    <title>Introduction</title>

    <para>
        Relational mapping frameworks like Hibernate and JPA have offered
        developers the ability to use annotations to map database tables to Java
        objects for some time. Spring LDAP project offers a similar
        ability with respect to directories through the use of a number of methods:
        in <literal>LdapOperations</literal>
        <itemizedlist>
            <listitem><literal>&lt;T&gt; T findByDn(Name dn, Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>&lt;T&gt; T findOne(LdapQuery query, Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>&lt;T&gt; List&lt;T&gt; find(LdapQuery query, Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>&lt;T&gt; List&lt;T&gt; findAll(Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>&lt;T&gt; List&lt;T&gt; findAll(Name base, SearchControls searchControls,
                Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>&lt;T&gt; List&lt;T&gt; findAll(Name base, Filter filter, SearchControls searchControls,
                Class&lt;T&gt; clazz)</literal></listitem>
            <listitem><literal>void create(Object entry)</literal></listitem>
            <listitem><literal>void update(Object entry)</literal></listitem>
            <listitem><literal>void delete(Object entry)</literal></listitem>
        </itemizedlist>
    </para>
  </sect1>

  <sect1 id="odm-annotations">
    <title>Annotations</title>

    <para>Entity classes managed used with the object mapping methods are required
    to be annotated with annotations from the
    <literal>org.springframework.ldap.odm.annotations</literal> package. The
    available annotations are:</para>

    <itemizedlist>
      <listitem>
        <para><literal>@Entry</literal> - Class level annotation indicating the
        <literal>objectClass</literal> definitions to which the entity
        maps.<emphasis> (required)</emphasis></para>
      </listitem>

      <listitem>
        <para><literal>@Id</literal> - Indicates the entity DN; the field declaring
        this attribute must be a derivative of the
        <literal>javax.naming.Name</literal> class.
        <emphasis>(required)</emphasis></para>
      </listitem>

      <listitem>
        <para><literal>@Attribute</literal> - Indicates the mapping of a directory
        attribute to the object class field.</para>
      </listitem>

        <listitem>
            <para><literal>@DnAttribute</literal> - Indicates the mapping of a dn
                attribute to the object class field.</para>
        </listitem>

        <listitem>
        <para><literal>@Transient</literal> - Indicates the field is not persistent
        and should be ignored by the <literal>OdmManager</literal>.</para>
      </listitem>
    </itemizedlist>

    <simpara>
        The <literal>@Entry</literal> and <literal>@Id</literal> attributes are
        required to be declared on managed classes.
        <literal>@Entry</literal> is used to specify which object classes the entity maps to.
        All object classes for which fields are mapped are required to be declared. Also, in order for a
        directory entry to be considered a match to the managed entity, all object
        classes declared by the directory entry must match be declared by in the
        <literal>@Entry</literal> annotation. For example: let's assume that you have entries in
        your LDAP tree that have the objectclasses<literal>inetOrgPerson,organizationalPerson,person,top</literal>.
        If you are only interested in changing the attributes defined in the <literal>person</literal>
        objectclass, your <literal>@Entry</literal> annotation can be
        <literal>@Entry(objectClasses = { "person", "top" })</literal>. However, if you want to manage
        attributes defined in the <literal>inetOrgPerson</literal> objectclass you'll need to use the full
        monty: <literal>@Entry(objectClasses = { "inetOrgPerson", "organizationalPerson", "person", "top" })</literal>.
    </simpara>

    <simpara>The <literal>@Id</literal> annotation is used to map the distinguished
    name of the entry to a field. The field must be an instance of
    <literal>javax.naming.Name</literal>.</simpara>

    <simpara>The <literal>@Attribute</literal> annotation is used to map object
    class fields to entity fields. <literal>@Attribute</literal> is required to
    declare the name of the object class property to which the field maps and
    may optionally declare the syntax OID of the LDAP attribute, to guarantee
    exact matching. <literal>@Attribute</literal> also provides the type declaration
    which allows you to indicate whether the attribute is regarded as binary
    based or string based by the LDAP JNDI provider.</simpara>

      <simpara>
          The <literal>@DnAttribute</literal> annotation is used to map object class fields
          to and from components in the distinguished name of an entry. Fields annotated with
          <literal>@DnAttribute</literal>
          will automatically be populated with the appropriate value from the distinguished name
          when an entry is read from the directory tree. If the <literal>index</literal> attribute
          of all <literal>@DnAttribute</literal> annotations in a class is specified, the DN
          will also be calculated when creating and updating entries. For update scenarios,
          this will also automatically take care of moving entries in the tree if attributes
          that are part of the distinguished name have changed.
      </simpara>

    <simpara>The <literal>@Transient</literal> annotation is used to indicate the
    field should be ignored by the object directory mapping and not mapped to
    an underlying LDAP property. Note that if a <literal>@DnAttribute</literal> is not to be bound
    to an Attribute, i.e. it is only part of the Distinguished Name and not represented by an object attibute,
    it must also be annotated with <literal>@Transient</literal>.</simpara>
  </sect1>

  <sect1 id="odm-typeconversion">
    <title>Type Conversion</title>

    <para>The object directory mapping relies on the
    <literal>org.springframework.ldap.odm.typeconversion</literal> package to
    convert LDAP attributes to Java fields. For simple setups, no particular configuraion
        is needed for this purpose. However, more complex mapping scenarios require the
        <literal>ObjectDirectoryMapper</literal> and its associated <literal>ConverterManager</literal>
        to be explicitly configured on the <literal>LdapTemplate</literal> instance.

    The default <literal>ConverterManager</literal> implementation uses the
    following algorithm when parsing objects to convert fields:<orderedlist>
        <listitem>
          <para>Try to find and use a <literal>Converter</literal> registered for
          the <literal>fromClass</literal>, <literal>syntax</literal> and
          <literal>toClass</literal> and use it.</para>
        </listitem>

        <listitem>
          <para>If this fails, then if the <literal>toClass</literal>
          <literal>isAssignableFrom</literal> the
          <literal>fromClass</literal> then just assign it.</para>
        </listitem>

        <listitem>
          <para>If this fails try to find and use a
          <literal>Converter</literal> registered for the
          <literal>fromClass</literal> and the <literal>toClass</literal> ignoring the
          syntax.</para>
        </listitem>

        <listitem>
          <para>If this fails then throw a
          <exceptionname>ConverterException</exceptionname>.</para>
        </listitem>
      </orderedlist></para>

    <para>Implementations of the <code>ConverterManager</code> interface can
    be obtained from the
    <code>o.s.l.odm.typeconversion.impl.ConvertManagerFactoryBean</code>.
    The factory bean requires converter configurations to be declared in the
    bean configuration.</para>

    <para>The converterConfig property accepts a set of
    <code>ConverterConfig</code> classes, each one defining some conversion
    logic. A converter config is an instance of
    <code>o.s.l.odm.typeconversion.impl.ConverterManagerFactoryBean.ConverterConfig</code>.
    The config defines a set of source classes, the set of target classes, and
    an implementation of the
    <code>org.springframework.ldap.odm.typeconversion.impl.Converter</code>
    interface which provides the logic to convert from the
    <code>fromClass</code> to the <code>toClass</code>. A sample configuration
    is provided in the following example:</para>

    <example>
      <title>Configuring the Converter Manager Factory</title>

      <programlisting>
&lt;bean id="fromStringConverter"
   class="org.springframework.ldap.odm.typeconversion.impl.converters.FromStringConverter" /&gt;
&lt;bean id="toStringConverter"
   class="org.springframework.ldap.odm.typeconversion.impl.converters.ToStringConverter" /&gt;
&lt;bean id="converterManager"
   class="org.springframework.ldap.odm.typeconversion.impl.ConverterManagerFactoryBean"&gt;
   &lt;property name="converterConfig"&gt;
      &lt;set&gt;
      &lt;bean class="org.springframework.ldap.odm.\
      typeconversion.impl.ConverterManagerFactoryBean$ConverterConfig"&gt;
            &lt;property name="fromClasses"&gt;
               &lt;set&gt;
                  &lt;value&gt;java.lang.String&lt;/value&gt;
               &lt;/set&gt;
            &lt;/property&gt;
            &lt;property name="toClasses"&gt;
               &lt;set&gt;
                  &lt;value&gt;java.lang.Byte&lt;/value&gt;
                  &lt;value&gt;java.lang.Short&lt;/value&gt;
                  &lt;value&gt;java.lang.Integer&lt;/value&gt;
                  &lt;value&gt;java.lang.Long&lt;/value&gt;
                  &lt;value&gt;java.lang.Float&lt;/value&gt;
                  &lt;value&gt;java.lang.Double&lt;/value&gt;
                  &lt;value&gt;java.lang.Boolean&lt;/value&gt;
               &lt;/set&gt;
            &lt;/property&gt;
            &lt;property name="converter" ref="fromStringConverter" /&gt;
         &lt;/bean&gt;
         &lt;bean class="org.springframework.ldap.odm.\
	 typeconversion.impl.ConverterManagerFactoryBean$ConverterConfig"&gt;
            &lt;property name="fromClasses"&gt;
               &lt;set&gt;
                  &lt;value&gt;java.lang.Byte&lt;/value&gt;
                  &lt;value&gt;java.lang.Short&lt;/value&gt;
                  &lt;value&gt;java.lang.Integer&lt;/value&gt;
                  &lt;value&gt;java.lang.Long&lt;/value&gt;
                  &lt;value&gt;java.lang.Float&lt;/value&gt;
                  &lt;value&gt;java.lang.Double&lt;/value&gt;
                  &lt;value&gt;java.lang.Boolean&lt;/value&gt;
               &lt;/set&gt;
            &lt;/property&gt;
            &lt;property name="toClasses"&gt;
               &lt;set&gt;
                  &lt;value&gt;java.lang.String&lt;/value&gt;
               &lt;/set&gt;
            &lt;/property&gt;
            &lt;property name="converter" ref="toStringConverter" /&gt;
         &lt;/bean&gt;
      &lt;/set&gt;
   &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="ldapTemplate"
          class="org.springframework.ldap.core.LdapTemplate"&gt;
   &lt;property name="objectDirectoryMapper"&gt;
      &lt;bean class="org.springframework.ldap.odm.impl.DefaultObjectDirectoryMapper"&gt;
         &lt;property name="converterManager" ref="converterManager" /&gt;
      &lt;/bean&gt;
   &lt;/property&gt;
   &lt;!-- More configuration of LdapTemplate here --&gt;
&lt;/bean&gt;

</programlisting>
    </example>
  </sect1>

  <sect1 id="odm-execution">
    <title>Execution</title>

    <para>
        When all components have been properly configured and annotated, the object mapping
        methods of <literal>LdapTemplate</literal> can be used as follows:</para>
    <example>
      <title>Execution</title>

      <programlisting>
@Entry(objectClasses = { "person", "top" }, base="ou=someOu")
public class Person {
   @Id
   private Name dn;

   @Attribute(name="cn")
   @DnAttribute(value="cn", index=1)
   private String fullName;

   // No @Attribute annotation means this will be bound to the LDAP attribute
   // with the same value
   private String description;

   @DnAttribute(value="ou", index=0)
   @Transient
   private String company;

   @Transient
   private String someUnmappedField;
   // ...more attributes below
}


public class OdmPersonDao {
   @Autowired
   private LdapTemplate ldapTemplate;

   public Person create(Person person) {
      ldapTemplate.create(person);
      return person;
   }

   public Person findByUid(String uid) {
      return ldapTemplate.findOne(query().where("uid").is(uid), Person.class);
   }

   public void update(Person person) {
      ldapTemplate.update(person);
   }

   public void delete(Person person) {
      ldapTemplate.delete(person);
   }

   public List&gt;Person&lt; findAll() {
      return ldapTemplate.findAll(Person.class);
   }

   public List&gt;Person&lt; findByLastName(String lastName) {
      return ldapTemplate.find(query().where("sn").is(lastName), Person.class);
   }
}
</programlisting>
    </example>
  </sect1>
</chapter>
