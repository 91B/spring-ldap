<?xml version="1.0" encoding="UTF-8"?>

<chapter id="pooling">
	<title>Pooling Support</title>

	<sect1 id="pooling-intro">
		<title>Introduction</title>

		<para>
			Pooling LDAP connections helps mitigate the overhead of
			creating a new LDAP connection for each LDAP interaction.
			While
			<ulink
				url="http://java.sun.com/products/jndi/tutorial/ldap/connect/pool.html">
				Java LDAP pooling support
			</ulink>
			exists it is limited in its configuration options and
			features, such as connection validation and pool
			maintenance. Spring LDAP provides support for detailed pool
			configuration on a per-
			<literal>ContextSource</literal>
			basis.
		</para>

		<para>
			Pooling support is provided by supplying a <literal>&lt;ldap:pooling /&gt;</literal> sub-element
            to the <literal>&lt;ldap:context-source /&gt;</literal> element in the application context configuration.
			Read-only and read-write <literal>DirContext</literal> objects are pooled separately
            (if <literal>anonymous-read-only</literal> is specified.
			<ulink url="http://commons.apache.org/pool/index.html">
				Jakarta Commons-Pool
			</ulink>
			is used to provide the underlying pool implementation.
		</para>
	</sect1>

	<sect1 id="pooling-validation">
		<title>DirContext Validation</title>

		<para>
			Validation of pooled connections is the primary motivation
			for using a custom pooling library versus the JDK provided
			LDAP pooling functionality. Validation allows pooled
			<literal>DirContext</literal>
			connections to be checked to ensure they are still properly
			connected and configured when checking them out of the pool,
			in to the pool or while idle in the pool.
		</para>

		<para>
			If connection validation is configured, pooled connections are validated using
			<literal>DefaultDirContextValidator</literal>.
			<literal>DefaultDirContextValidator</literal>
			does a
			<literal>
				DirContext.search(String, String, SearchControls)
			</literal>
			, with an empty name, a filter of
			<literal>"objectclass=*"</literal>
			and
			<literal>SearchControls</literal>
			set to limit a single result with the only the objectclass
			attribute and a 500ms timeout. If the returned
			<literal>NamingEnumeration</literal>
			has results the
			<literal>DirContext</literal>
			passes validation, if no results are returned or an
			exception is thrown the
			<literal>DirContext</literal>
			fails validation. The default settings
			should work with no configuration changes on most LDAP
			servers and provide the fastest way to validate the
			<literal>DirContext</literal>. If customization required this can be done using the validation
            configuration attributes, described below
		</para>
        <note>
            Connections will be automatically invalidated if they throw an exception that is considered
            non-transient. E.g. if a <literal>DirContext</literal> instance throws a
            <literal>javax.naming.CommunicationException</literal>, this will be interpreted
            as a non-transient error and the instance will be automatically invalidated, without the overhead
            of an additional testOnReturn operation. The exceptions that are interpreted as non-transient are
            configured using the <literal>nonTransientExceptions</literal> property of the
            <literal>PoolingContextSource</literal>.
        </note>
	</sect1>

	<sect1 id="pooling-properties">
		<title>Pool Configuration</title>

		<para>
			The following attributes are available on the
			<literal>&lt;ldap:pooling /&gt;</literal> element
			for configuration of the DirContext pool:
		</para>

		<table frame="all">
			<title>Pooling Configuration Attributes</title>
			<tgroup align="left" cols="3" colsep="1" rowsep="1">
				<colspec colname="c1" />

				<colspec colname="c2" />

				<colspec colname="c3" />

				<thead>
					<row>
						<entry>Attribute</entry>

						<entry>Default</entry>

						<entry>Description</entry>
					</row>
				</thead>

				<tbody>
					<row>
						<entry>
							<literal>max-active</literal>
						</entry>

						<entry>
							<literal>8</literal>
						</entry>

						<entry>
							The maximum number of active connections of
							each type (read-only|read-write) that can be
							allocated from this pool at the same time,
							or non-positive for no limit.
						</entry>
					</row>

					<row>
						<entry>
							<literal>max-total</literal>
						</entry>

						<entry>
							<literal>-1</literal>
						</entry>

						<entry>
							The overall maximum number of active
							connections (for all types) that can be
							allocated from this pool at the same time,
							or non-positive for no limit.
						</entry>
					</row>

					<row>
						<entry>
							<literal>max-idle</literal>
						</entry>

						<entry>
							<literal>8</literal>
						</entry>

						<entry>
							The maximum number of active connections of
							each type (read-only|read-write) that can
							remain idle in the pool, without extra ones
							being released, or non-positive for no
							limit.
						</entry>
					</row>

					<row>
						<entry>
							<literal>min-idle</literal>
						</entry>

						<entry>
							<literal>0</literal>
						</entry>

						<entry>
							The minimum number of active connections of
							each type (read-only|read-write) that can
							remain idle in the pool, without extra ones
							being created, or zero to create none.
						</entry>
					</row>

					<row>
						<entry>
							<literal>max-wait</literal>
						</entry>

						<entry>
							<literal>-1</literal>
						</entry>

						<entry>
							The maximum number of milliseconds that the
							pool will wait (when there are no available
							connections) for a connection to be returned
							before throwing an exception, or
							non-positive to wait indefinitely.
						</entry>
					</row>

					<row>
						<entry>
							<literal>when-exhausted</literal>
						</entry>

						<entry>
							<literal>BLOCK</literal>
						</entry>

						<entry>
							Specifies the behaviour when the pool is
							exhausted.
							<itemizedlist>
								<listitem>
									<para>
										The <literal>FAIL</literal> option will throw a
										<literal>
											NoSuchElementException
										</literal>
										when the pool is exhausted.
									</para>
								</listitem>

                                <listitem>
                                    <para>
                                        The <literal>BLOCK</literal>
                                        option will wait until a new
                                        object is available. If
                                        <literal>max-wait</literal>
                                        is positive a
                                        <literal>
                                            NoSuchElementException
                                        </literal>
                                        is thrown if no new object is
                                        available after the
                                        <literal>max-wait</literal>
                                        time expires.
                                    </para>
                                </listitem>

								<listitem>
									<para>
										The <literal>GROW</literal>
										option will create and return a
										new object (essentially making
										<literal>max-active</literal>
										meaningless).
									</para>
								</listitem>
							</itemizedlist>
						</entry>
					</row>

					<row>
						<entry>
							<literal>test-on-borrow</literal>
						</entry>

						<entry>
							<literal>false</literal>
						</entry>

						<entry>
							The indication of whether objects will be
							validated before being borrowed from the
							pool. If the object fails to validate, it
							will be dropped from the pool, and an
							attempt to borrow another will be made.
						</entry>
					</row>

					<row>
						<entry>
							<literal>test-on-return</literal>
						</entry>

						<entry>
							<literal>false</literal>
						</entry>

						<entry>
							The indication of whether objects will be
							validated before being returned to the pool.
						</entry>
					</row>

					<row>
						<entry>
							<literal>test-while-idle</literal>
						</entry>

						<entry>
							<literal>false</literal>
						</entry>

						<entry>
							The indication of whether objects will be
							validated by the idle object evictor (if
							any). If an object fails to validate, it
							will be dropped from the pool.
						</entry>
					</row>

					<row>
						<entry>
							<literal>
                                eviction-run-interval-millis
							</literal>
						</entry>

						<entry>
							<literal>-1</literal>
						</entry>

						<entry>
							The number of milliseconds to sleep between
							runs of the idle object evictor thread. When
							non-positive, no idle object evictor thread
							will be run.
						</entry>
					</row>

					<row>
						<entry>
							<literal>tests-per-eviction-run</literal>
						</entry>

						<entry>
							<literal>3</literal>
						</entry>

						<entry>
							The number of objects to examine during each
							run of the idle object evictor thread (if
							any).
						</entry>
					</row>

					<row>
						<entry>
							<literal>
                                min-evictable-time-millis
							</literal>
						</entry>

						<entry>
							<literal>1000 * 60 * 30</literal>
						</entry>

						<entry>
							The minimum amount of time an object may sit
							idle in the pool before it is eligible for
							eviction by the idle object evictor (if
							any).
						</entry>
					</row>
                    <row>
                        <entry>
                            <literal>
                                validation-query-base
                            </literal>
                        </entry>

                        <entry>
                            <literal>LdapUtils.emptyName()</literal>
                        </entry>

                        <entry>
                            The search base to be used when validating connections. Only used if
                            <literal>test-on-borrow</literal>, <literal>test-on-return</literal>,
                            or <literal>test-while-idle</literal> is specified
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>
                                validation-query-filter
                            </literal>
                        </entry>

                        <entry>
                            <literal>objectclass=*</literal>
                        </entry>

                        <entry>
                            The search filter to be used when validating connections. Only used if
                            <literal>test-on-borrow</literal>, <literal>test-on-return</literal>,
                            or <literal>test-while-idle</literal> is specified
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>
                                validation-query-search-controls-ref
                            </literal>
                        </entry>

                        <entry>
                            <literal>null</literal>; default search control settings are described above.
                        </entry>

                        <entry>
                            Id of a SearchControls instance to be used when validating connections. Only used if
                            <literal>test-on-borrow</literal>, <literal>test-on-return</literal>,
                            or <literal>test-while-idle</literal> is specified
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>
                                non-transient-exceptions
                            </literal>
                        </entry>

                        <entry>
                            <literal>javax.naming.CommunicationException</literal>
                        </entry>

                        <entry>
                            Comma-separated list of Exception classes. The listed exceptions will be considered
                            non-transient with regards to eager invalidation. Should any of the listed exceptions
                            (or subclasses of them) be thrown by a call to a
                            pooled <literal>DirContext</literal> instance, that object will be
                            automatically invalidated without any additional testOnReturn operation.
                        </entry>
                    </row>
				</tbody>
			</tgroup>
		</table>
	</sect1>

	<sect1 id="pooling-configuration">
		<title>Configuration</title>

		<para>
			Configuring pooling should look very familiar if you're used
			to Jakarta Commons-Pool or Commons-DBCP. You will first
			create a normal
			<literal>ContextSource</literal>
			then wrap it in a
			<literal>PoolingContextSource</literal>
			.
			<informalexample>
				<programlisting><![CDATA[
<beans>
   ...
    <ldap:context-source
        password="secret" url="ldap://localhost:389" username="cn=Manager">
        <ldap:pooling />
    </ldap:context-source>
   ...
</beans>
]]></programlisting>
			</informalexample>
			In a real world example you would probably configure the
			pool options and enable connection validation; the above
			serves as an example to demonstrate the general idea.
		</para>

		<sect2 id="pooling-advanced-configuration">
			<title>Validation Configuration</title>

			<para>
				Adding validation and a few pool configuration tweaks to
				the above example is straight forward. Inject a
				<literal>DirContextValidator</literal>
				and set when validation should occur and the pool is
				ready to go.
				<informalexample>
					<programlisting><![CDATA[
<beans>
   ...
    <ldap:context-source
        username="cn=Manager" password="secret" url="ldap://localhost:389" >
        <ldap:pooling
            test-on-borrow="true"
            test-while-idle="true" />
    </ldap:context-source>
   ...
</beans>
]]></programlisting>
				</informalexample>
				The above example will test each
				<literal>DirContext</literal>
				before it is passed to the client application and test
				<literal>DirContext</literal>s that have been sitting idle in the pool.
			</para>
		</sect2>
	</sect1>
    
    <sect1 id="pooling-issues">
        <title>Known Issues</title>
        
        <sect2 id="pooling-custom-auth-issue">
            <title>Custom Authentication</title>
        
            <para>
                The <literal>PoolingContextSource</literal> assumes that all
                <literal>DirContext</literal> objects retrieved from
                <literal>ContextSource.getReadOnlyContext()</literal> will have
                the same environment and likewise that all
                <literal>DirContext</literal> objects retrieved from
                <literal>ContextSource.getReadWriteContext()</literal> will
                have the same environment. This means that wrapping a
                <literal>LdapContextSource</literal> configured with an
                <literal>AuthenticationSource</literal> in a
                <literal>PoolingContextSource</literal> will not function
                as expected. The pool would be populated using the credentials
                of the first user and unless new connections were needed
                subsequent context requests would not be filled for the user
                specified by the <literal>AuthenticationSource</literal> for
                the requesting thread.
            </para>
        </sect2>
    </sect1>
</chapter>