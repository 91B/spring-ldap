<?xml version="1.0" encoding="UTF-8"?>
<chapter id="configuration">
  <title>Configuration</title>
    <sect1 id="configuration-intro">
        <title>Introduction</title>
        The recommended way of configuring Spring LDAP is using the custom XML configuration namespace.
        In order to make this available you need to include the Spring LDAP namespace declaration in your
        bean file, e.g.:
        <informalexample>
            <programlisting>
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       <emphasis role="bold">xmlns:ldap="http://www.springframework.org/schema/ldap"</emphasis>
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       <emphasis role="bold">http://www.springframework.org/schema/ldap http://www.springframework.org/schema/ldap/spring-ldap.xsd"</emphasis>&gt;
</programlisting>
        </informalexample>
    </sect1>

    <sect1 id="context-source-configuration">
        <title>ContextSource Configuration</title>

        <para>
            The <literal>ContextSource</literal> is defined using a <literal>&lt;ldap:context-source&gt;</literal>
            tag. The simplest possible <literal>context-source</literal> declaration requires you to specify a
            server url, a username, and a password:
            <example>
                <title>Simplest possible context-source declaration</title>
                <programlisting><![CDATA[
<ldap:context-source username="cn=Administrator" password="secret" url="ldap://localhost:389" />]]></programlisting>
            </example>
            This will create an <literal>LdapContextSource</literal> with default values (see below),
            and the url and authentication information as specified.
        </para>
        <para>
            The configurable attributes on context-source are as follows (required attributes marked with *):
        </para>
        <table frame="all">
            <title>ContextSource Configuration Attributes</title>
            <tgroup align="left" cols="3" colsep="1" rowsep="1">
                <colspec colname="c1" />
                <colspec colname="c2" />
                <colspec colname="c3" />
                <thead>
                    <row>
                        <entry>Attribute</entry>
                        <entry>Default</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <literal>id</literal>
                        </entry>
                        <entry>
                            <literal>contextSource</literal>
                        </entry>
                        <entry>
                            The id of the created bean.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>username</literal>
                        </entry>
                        <entry>
                        </entry>
                        <entry>
                            The username (principal) to use when authenticating with the LDAP server.
                            This will usually be the distinguished name of an admin user (e.g.
                            <literal>cn=Administrator</literal>, but may differ depending on server
                            and authentication method.
                            Required if <literal>authentication-source-ref</literal> is not explicitly configured.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>password</literal>
                        </entry>
                        <entry>
                        </entry>
                        <entry>
                            The password (credentials) to use when authenticating with the LDAP server.
                            Required if <literal>authentication-source-ref</literal> is not explicitly configured.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>url</literal> *
                        </entry>
                        <entry>
                        </entry>
                        <entry>
                            The URL of the LDAP server to use. The URL should be in the format
                            <literal>ldap://myserver.example.com:389</literal>.
                            For SSL access, use the <literal>ldaps</literal> protocol and the appropriate port, e.g.
                            <literal>ldaps://myserver.example.com:636</literal>. If fail-over functionality is desired,
                            more than one URL can be specified, separated using comma (,).
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>base</literal>
                        </entry>
                        <entry>
                            <literal>LdapUtils.emptyLdapName()</literal>
                        </entry>
                        <entry>
                            The base DN. When this attribute has been configured, all Distinguished Names supplied to
                            and received from LDAP operations will be relative to the sepecified LDAP path.
                            This can significantly simplify working against the LDAP tree; however there are several
                            occasions when you will need to have access to the base path.
                            For more information on this, please refer to <xref linkend="base-context-configuration" />
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>anonymous-read-only</literal>
                        </entry>
                        <entry>
                            <literal>false</literal>
                        </entry>
                        <entry>
                            Defines whether read-only operations will be performed using an anonymous (unauthenticated) context.
                            <emphasis role="bold">Note</emphasis> that setting this parameter to <literal>true</literal>
                            together with the compensating transaction support is not supported and will be rejected.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>referral</literal>
                        </entry>
                        <entry>
                            <literal>null</literal>
                        </entry>
                        <entry>
                            Defines the strategy to handle referrals, as described
                            <ulink url="http://docs.oracle.com/javase/jndi/tutorial/ldap/referral/jndi.html">here</ulink>.
                            Valid values are:
                            <itemizedlist>
                                <listitem><literal>ignore</literal></listitem>
                                <listitem><literal>follow</literal></listitem>
                                <listitem><literal>throw</literal></listitem>
                            </itemizedlist>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>native-pooling</literal>
                        </entry>
                        <entry>
                            <literal>false</literal>
                        </entry>
                        <entry>
                            Specify whether native Java LDAP connection pooling should be used. Consider using
                            Spring LDAP connection pooling instead. See <xref linkend="pooling" /> for more information.
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>authentication-source-ref</literal>
                        </entry>
                        <entry>
                            A <literal>SimpleAuthenticationSource</literal> instance.
                        </entry>
                        <entry>
                            Id of the AuthenticationSource instance to use (see below).
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>authentication-strategy-ref</literal>
                        </entry>
                        <entry>
                            A <literal>SimpleDirContextAuthenticationStrategy</literal> instance.
                        </entry>
                        <entry>
                            Id of the DirContextAuthenticationStrategy instance to use (see below).
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>base-env-props-ref</literal>
                        </entry>
                        <entry>
                            A <literal>SimpleDirContextAuthenticationStrategy</literal> instance.
                        </entry>
                        <entry>
                            Reference to a Map of custom environment properties that should supplied with the environment
                            sent to the <literal>DirContext</literal> on construction.
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

    <sect2 id="dir-context-authentication">
      <title>DirContext Authentication</title>

      <para>
          When <literal>DirContext</literal> instances are created to be used for performing
          operations on an LDAP server these contexts often need to be authenticated. There are
          different options for configuring this using Spring LDAP, described in this chapter.

          <note>
              <para>
                  This section refers to authenticating contexts in the core functionality
                  of the <literal>ContextSource</literal> - to construct <literal>DirContext</literal> instances
                  for use by <literal>LdapTemplate</literal>. LDAP is commonly used for the sole purpose
                  of user authentication, and the <literal>ContextSource</literal> may be used for that as
                  well. This process is discussed in <xref linkend="user-authentication" />.
              </para>
          </note>
      </para>

      <para>
          Authenticated contexts are created for both read-only and
          read-write operations by default. You specify
          <literal>username</literal> and <literal>password</literal> of the LDAP
          user to be used for authentication on the
          <literal>context-source</literal> element.

          <note>
              <para>
                  If <literal>username</literal> is the dn of an LDAP user, it needs to be the full
                  Distinguished Name (DN) of the user from the root of the LDAP tree,
                  regardless of whether a <literal>base</literal> LDAP path has been specified on
                  the <literal>context-source</literal> element.
              </para>
          </note>
      </para>
      <para>
          Some LDAP server setups allow anonymous read-only access. If you
          want to use anonymous Contexts for read-only operations, set the
          <literal>anonymous-read-only</literal> attribute to
          <literal>true</literal>.
      </para>

      <sect3 id="custom-authentication-processing">
        <title>Custom DirContext Authentication Processing</title>
        
        <para>
            The default authentication mechanism used in Spring LDAP is <literal>SIMPLE</literal> authentication.
            This means that the principal (as specified to the <literal>username</literal> attribute) and
            the credentials (as specified to the <literal>password</literal>) are set in
            the Hashtable sent to the <literal>DirContext</literal> implementation constructor.
        </para>
        <para>
            There are many occasions when this processing is not sufficient. For instance,
            LDAP Servers are commonly set up to only accept communication on a secure TLS channel;
            there might be a need to use the particular LDAP Proxy Auth mechanism, etc.
        </para>
        <para>
            It is possible to specify an alternative authentication mechanism by supplying a
            <literal>DirContextAuthenticationStrategy</literal> implementation reference
            to the <literal>context-source</literal> element using the <literal>authentication-strategy-ref</literal>
            attribute.
        </para>
        <sect4 id="authentication-tls">
        	<title>TLS</title>
        	
        	<para>
                Spring LDAP provides two different configuration options for LDAP servers requiring TLS secure
                channel communication: <literal>DefaultTlsDirContextAuthenticationStrategy</literal> and
                <literal>ExternalTlsDirContextAuthenticationStrategy</literal>. Both these
                implementations will negotiate a TLS channel on the target connection, but they differ in the actual authentication mechanism.
                Whereas the <literal>DefaultTlsDirContextAuthenticationStrategy</literal> will apply SIMPLE authentication
                on the secure channel (using the specified <literal>userDn</literal> and <literal>password</literal>),
                the <literal>ExternalDirContextAuthenticationStrategy</literal> will use EXTERNAL SASL authentication,
                applying a client certificate configured using system properties for authentication.
            </para>
        	
        	<para>
                Since different LDAP server implementations respond differently to explicit shutdown of the
                TLS channel (some servers require the connection be shutdown gracefully; others do not support it),
                the TLS <literal>DirContextAuthenticationStrategy</literal> implementations support specifying
                the shutdown behavior using the <literal>shutdownTlsGracefully</literal> parameter. If this
                property is set to <literal>false</literal> (the default), no explicit TLS shutdown will happen;
                if it is <literal>true</literal>, Spring LDAP will try to shutdown the TLS channel gracefully
                before closing the target context.
            </para>
        	
            <note>
                <para>
                    When working with TLS connections you need to make sure that the native LDAP
                    Pooling functionality (as specified using the <literal>native-pooling</literal> attribute
                    is turned off. This is particularly important if <literal>shutdownTlsGracefully</literal>
                    is set to <literal>false</literal>. However, since the TLS channel negotiation process is
                    quite expensive, great performance benefits will be gained by using the Spring LDAP
                    Pooling Support, described in <xref linkend="pooling" />.
        	    </para>
            </note>
        </sect4>
	  </sect3>
      <sect3>
        <title>Custom Principal and Credentials Management</title>

        <para>
            While the user name (i.e. user DN) and password used for
            creating an authenticated <literal>Context</literal> are statically defined by
            default - the ones defined in the <literal>context-source</literal> element
            configuration will be used throughout the lifetime of the
            <literal>ContextSource</literal> - there are several cases where this is not the desired behaviour.
            A common scenario is that the principal and credentials of the current user should be used when
            executing LDAP operations for that user. The default behaviour can be
            modified by supplying a reference to an <literal>AuthenticationSource</literal>
            implementation to the <literal>context-source</literal> element using the
            <literal>authentication-source-ref</literal> element,
            instead of explicitly specifying the <literal>username</literal> and
            <literal>password</literal>. The
            <literal>AuthenticationSource</literal> will be queried by the
            <literal>ContextSource</literal> for principal and credentials each
            time an authenticated <literal>Context</literal> is to be
            created.
        </para>

		<para>
            If you are using <ulink url="http://springsecurity.org">Spring Security</ulink>
            you can make sure the principal and credentials of the currently logged in user
            is used at all times by configuring your <literal>ContextSource</literal>
            with an instance of the <literal>SpringSecurityAuthenticationSource</literal>
            shipped with Spring Security.
        </para>

        <example>
          <title>Using the <literal>SpringSecurityAuthenticationSource</literal></title>

          <programlisting><![CDATA[
<beans>
...
    <ldap:context-source
        url="ldap://localhost:389"
        authentication-source-ref="springSecurityAuthenticationSource/>

    <bean id="springSecurityAuthenticationSource"
        class="org.springframework.security.ldap.SpringSecurityAuthenticationSource" />
...
</beans>]]></programlisting>
        </example>

        <note>
          <para>
              We don't specify any <literal>username</literal> or
              <literal>password</literal> to our <literal>context-source</literal>
              when using an <literal>AuthenticationSource</literal> - these
              properties are needed only when the default behaviour is
              used.
          </para>
        </note>

        <note>
          <para>
              When using the <literal>SpringSecurityAuthenticationSource</literal>
              you need to use Spring Security's <literal>LdapAuthenticationProvider</literal> to authenticate the
              users against LDAP.
          </para>
        </note>
      </sect3>
    </sect2>

    <sect2 id="context-source-pooling">
      <title>Native Java LDAP Pooling</title>
      <para>The internal Java LDAP provider provides some very basic pooling capabilities.
      This  LDAP connection pooling can be turned on/off using the
      <literal>pooled</literal> flag on <literal>AbstractContextSource</literal>. 
      The default value is <literal>false</literal> (since release 1.3), i.e. the native
      Java LDAP pooling will be turned off. The configuration of LDAP connection pooling is managed using
      <literal>System</literal> properties, so this needs to be handled
      manually, outside of the Spring Context configuration. Details of the native pooling configuration
      can be found <ulink url="http://java.sun.com/products/jndi/tutorial/ldap/connect/config.html">here</ulink>.
      </para>
      <para><note>
      There are several serious deficiencies in the built-in LDAP connection pooling, 
      which is why Spring LDAP provides a more sophisticated approach to LDAP connection pooling, 
      described in <xref linkend="pooling" />. If pooling functionality is required, this is the
      recommended approach.</note></para>
      <para><note>
          Regardless of the pooling configuration, the <literal>ContextSource#getContext(String principal, String credentials)</literal>
          method will always explicitly <emphasis>not</emphasis> use native Java LDAP Pooling, in order for
          reset passwords to take effect as soon as possible.
      </note></para>
    </sect2>
    <sect2 id="context-source-advanced">
      <title>Advanced ContextSource Configuration</title>
      <sect3 id="context-source-custom-env-properties">
        <title>Custom DirContext Environment Properties</title>
        <para>
            In some cases the user might want to specify additional environment setup properties
            in addition to the ones directly configurable on <literal>context-source</literal>.
            Such properties should be set in a <literal>Map</literal> and referenced in
            the <literal>base-env-props-ref</literal> attribute.</para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="ldap-template-configuration">
    <title>LdapTemplate Configuration</title>
    <para>
        The <literal>LdapTemplate</literal> is defined using a <literal>&lt;ldap:ldap-template&gt;</literal>
        tag. The simplest possible <literal>ldap-template</literal> declaration is the simple tag:
        <example>
            <title>Simplest possible ldap-template declaration</title>
            <programlisting><![CDATA[
<ldap:ldap-template />]]></programlisting>
        </example>
        This will create an <literal>LdapTemplate</literal> instance with the default id, referencing the
        default <literal>ContextSource</literal>, which is expected to have the id <literal>contextSource</literal>
        (the default for the <literal>context-source</literal> element).
      </para>
      <para>
          The configurable attributes on <literal>ldap-template</literal> are as follows:
      </para>
      <table frame="all">
          <title>LdapTemplate Configuration Attributes</title>
          <tgroup align="left" cols="3" colsep="1" rowsep="1">
              <colspec colname="c1" />
              <colspec colname="c2" />
              <colspec colname="c3" />
              <thead>
                  <row>
                      <entry>Attribute</entry>
                      <entry>Default</entry>
                      <entry>Description</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry>
                          <literal>id</literal>
                      </entry>
                      <entry>
                          <literal>ldapTemplate</literal>
                      </entry>
                      <entry>
                          The id of the created bean.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>context-source-ref</literal>
                      </entry>
                      <entry>
                          <literal>contextSource</literal>
                      </entry>
                      <entry>
                          Id of the ContextSource instance to use.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>count-limit</literal>
                      </entry>
                      <entry>
                          <literal>0</literal>
                      </entry>
                      <entry>
                          The default count limit for searches. 0 means no limit.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>time-limit</literal>
                      </entry>
                      <entry>
                          <literal>0</literal>
                      </entry>
                      <entry>
                          The default time limit for searches in milliseconds. 0 means no limit.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>search-scope</literal>
                      </entry>
                      <entry>
                          <literal>SUBTREE</literal>
                      </entry>
                      <entry>
                          The default search scope for searches.
                          Valid values are:
                          <itemizedlist>
                              <listitem><literal>OBJECT</literal></listitem>
                              <listitem><literal>ONELEVEL</literal></listitem>
                              <listitem><literal>SUBTREE</literal></listitem>
                          </itemizedlist>
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>ignore-name-not-found</literal>
                      </entry>
                      <entry>
                          <literal>false</literal>
                      </entry>
                      <entry>
                          Specifies whether NameNotFoundException should be ignored in searches. Setting this
                          attribute to true will cause errors caused by invalid search base to be silently swallowed.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>ignore-partial-result</literal>
                      </entry>
                      <entry>
                          <literal>false</literal>
                      </entry>
                      <entry>
                          Specifies whether PartialResultException should be ignored in searches. Some LDAP servers
                          have problems with referrals; these should normally be followed automatically, but if this
                          doesn't work it will manifest itself with a PartialResultException. Setting this attribute
                          to true presents a work-around to this problem.
                      </entry>
                  </row>
                  <row>
                      <entry>
                          <literal>odm-ref</literal>
                      </entry>
                      <entry>
                      </entry>
                      <entry>
                          Id of the ObjectDirectoryMapper instance to use. Default is a default-configured DefaultObjectDirectoryMapper.
                      </entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

  </sect1>

  <sect1 id="base-context-configuration">
  	<title>Obtaining a reference to the base LDAP path</title>
  	<para>
        As described above, a base LDAP path may be supplied to the <literal>ContextSource</literal>,
        specifying the root in the LDAP tree to which all operations will be relative. This means that
        you will only be working with relative distinguished names throughout your system, which is
        typically rather handy. There are however some cases in which you will need to have access
        to the base path in order to be able to construct full DNs, relative to the actual root of the LDAP tree.
        One example would be when working with LDAP groups (e.g. <literal>groupOfNames</literal> objectclass),
        in which case each group member attribute value will need to be the full DN of the referenced member.</para>
        <para>For that reason, Spring LDAP has a mechanism by which any Spring controlled bean may be supplied
        the base path on startup. For beans to be notified of the base path, two things need to be in place:
        First of all, the bean that wants the base path reference needs to implement the
        <literal>BaseLdapNameAware</literal> interface. Secondly, a <literal>BaseLdapPathBeanPostProcessor</literal>
        needs to be defined in the application context
    </para>
  	<example>
      <title>Implementing <literal>BaseLdapNameAware</literal></title>
      <programlisting>package com.example.service;
public class PersonService implements PersonService, <emphasis role="bold">BaseLdapNameAware</emphasis> {
   ...
   <emphasis role="bold">private LdapName basePath;
   
   public void setBaseLdapPath(LdapName basePath) {
      this.basePath = basePath;
   }</emphasis>
   ...
   private LdapName getFullPersonDn(Person person) {
      return LdapNameBuilder.newLdapName(<emphasis role="bold">basePath</emphasis>)
          .append(person.getDn())
          .build();
   }
   ...
}</programlisting>
    </example>
  	<example>
      <title>Specifying a <literal>BaseLdapPathBeanPostProcessor</literal> in your <literal>ApplicationContext</literal></title>

      <programlisting>&lt;beans&gt;
   ...
   &lt;ldap:context-source
          username="cn=Administrator"
          password="secret"
          url="ldap://localhost:389"
          base="dc=261consulting,dc=com" /&gt;
   ...
   <emphasis role="bold">&lt;bean class="org.springframework.ldap.core.support.BaseLdapPathBeanPostProcessor" /&gt;</emphasis>
&lt;/beans&gt;
  	  </programlisting>
  	</example>
  	<para>
        The default behaviour of the <literal>BaseLdapPathBeanPostProcessor</literal> is to use the base path of the single
        defined <literal>BaseLdapPathSource</literal> (<literal>AbstractContextSource</literal>)in the <literal>ApplicationContext</literal>.
        If more than one <literal>BaseLdapPathSource</literal> is defined, you will need to specify which one to use with the
        <literal>baseLdapPathSourceName</literal> property.
    </para>
  </sect1>
</chapter>
